//! @NOTE (jrc): This code is auto-generated by scripts/generate_zui_stubs/main.go and will be
//! automatically overwritten the next time the script is run. DO NOT MANUALLY EDIT!

const std = @import("std");

const zui = @import("../zui.zig");
const cimgui = @import("cimgui");
const imgui = cimgui.c;

pub fn getWindowSize() zui.ImVec2 { return .{}; }

pub fn begin(_: [:0]const u8, _: zui.Begin) bool { return true; }

pub fn end() void {  }

pub fn beginChild(_: [:0]const u8, _: zui.BeginChild) bool { return true; }

pub fn endChild() void {  }

pub fn sameLine(_: zui.SameLine) void {  }

pub fn setNextWindowSize(_: f32, _: f32) void {  }

pub fn setNextWindowPos(_: f32, _: f32, _: f32, _: f32) void {  }

pub fn setNextWindowFocus() void {  }

pub fn isItemFocused() bool { return true; }

pub fn isItemActive() bool { return true; }

pub fn pushItemWidth(_: f32) void {  }

pub fn popItemWidth() void {  }

pub fn setClipboardText(_: [*c]const u8) void {  }

pub fn beginPopupModal(_: [:0]const u8, _: zui.BeginPopupModal) bool { return true; }

pub fn endPopup() void {  }

pub fn openPopup(_: [:0]const u8, _: zui.OpenPopup) void {  }

pub fn openPopupOnItemClick(_: [:0]const u8, _: zui.OpenPopup) void {  }

pub fn beginPopupContextItem(_: [:0]const u8, _: zui.OpenPopup) bool { return true; }

pub fn beginTooltip() bool { return true; }

pub fn endTooltip() void {  }

pub fn beginMainMenuBar() bool { return true; }

pub fn endMainMenuBar() void {  }

pub fn beginMenu(_: [*c]const u8, _: bool) bool { return true; }

pub fn endMenu() void {  }

pub fn menuItem(_: [:0]const u8, _: zui.MenuItem) bool { return true; }

pub fn inputTextWithHint(_: [:0]const u8, _: zui.InputTextWithHint) bool { return true; }

pub fn setKeyboardFocusHere(_: i32) void {  }

pub fn getMousePos() zui.ImVec2 { return .{}; }

pub fn getScrollY() f32 { return 0; }

pub fn setScrollYFloat(_: f32) void {  }

pub fn getScrollMaxY() f32 { return 0; }

pub fn setScrollHereY(_: f32) void {  }

pub fn beginTable(_: [:0]const u8, _: zui.BeginTable) bool { return true; }

pub fn endTable() void {  }

pub fn tableNextRow(_: zui.TableNextRow) void {  }

pub fn tableNextColumn() bool { return true; }

pub fn tableHeadersRow() void {  }

pub fn tableSetupColumn(_: [:0]const u8, _: zui.TableSetupColumn) void {  }

pub fn tableSetupScrollFreeze(_: c_int, _: c_int) void {  }

pub fn beginTabBar(_: [:0]const u8, _: zui.TabBarFlags) bool { return true; }

pub fn endTabBar() void {  }

pub fn beginTabItem(_: [:0]const u8, _: zui.BeginTabItem) bool { return true; }

pub fn endTabItem() void {  }

pub inline fn getStyle() *zui.Style { var val = std.mem.zeroes(zui.Style); return &val; }

pub fn pushStyleColor4f(_: zui.PushStyleColor4f) void {  }

pub fn popStyleColor(_: zui.PopStyleColor) void {  }

pub fn tableSetBgColor(_: zui.TableSetBgColor) void {  }

pub fn selectable(_: [:0]const u8, _: zui.Selectable) bool { return false; }

pub fn isItemHovered(_: zui.HoveredFlags) bool { return true; }

pub fn button(_: [:0]const u8, _: zui.Button) bool { return false; }

pub fn isMouseClicked(_: zui.MouseButton) bool { return false; }

pub fn getCursorPosX() f32 { return 0; }

pub fn getCursorPosY() f32 { return 0; }

pub fn setCursorPosX(_: f32) void {  }

pub fn setCursorPosY(_: f32) void {  }

pub fn colorConvertFloat4ToU32(_: [4]f32) u32 { return 0; }

pub fn formatZ(comptime _: []const u8, _: anytype) [:0]const u8 { return 0; }

pub fn textUnformatted(_: []const u8) void {  }

pub fn textUnformattedColored(_: [4]f32, _: []const u8) void {  }

pub fn text(comptime _: []const u8, _: anytype) void {  }

pub fn textWrapped(comptime _: []const u8, _: anytype) void {  }

pub fn centerText(_: [:0]const u8) void {  }

pub fn dummy(_: zui.ImVec2) void {  }

pub fn calcTextSize(_: []const u8, _: zui.CalcTextSize) zui.ImVec2 { return .{}; }

pub fn bullet() void {  }

pub fn checkbox(_: [:0]const u8, _: zui.Checkbox) bool { return true; }

pub fn getMainViewport() *imgui.ImGuiViewport { var val = std.mem.zeroes(imgui.ImGuiViewport); return &val; }

pub fn getViewportCenter(_: *imgui.ImGuiViewport) zui.ImVec2 { return .{}; }

pub fn dockSpaceOverViewport(_: zui.DockSpaceOverViewport) zui.ID { return 0; }

pub fn dockBuilderGetNode(_: imgui.ImGuiID) ?*imgui.ImGuiDockNode { return null; }

pub fn dockBuilderSplitNode(_: zui.ID, _: zui.Direction, _: f32, _: *zui.ID, _: *zui.ID) zui.ID { return 0; }

pub fn dockNodeIsSplitNode(_: ?*imgui.ImGuiDockNode) bool { return true; }

pub fn dockBuilderDockWindow(_: [*c]const u8, _: imgui.ImGuiID) void {  }

pub fn dockBuilderFinish(_: imgui.ImGuiID) void {  }

pub fn treeNode(_: [:0]const u8) bool { return true; }

pub fn treePop() void {  }

